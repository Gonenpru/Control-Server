/*
 * 
 */
package db_items;
// Generated 04-ene-2017 11:51:08 by Hibernate Tools 5.1.0.Alpha1

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;

import engine.AirportEngine;
import engine.Enumerated.Sectors;
import threads.SynchronizationFactory;
import utils.HibernateUtils;

// TODO: Auto-generated Javadoc
/**
 * Planes generated by hbm2java.
 */

@Entity
@Table(name = "Planes")
public class Planes implements Serializable, Runnable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** The ae. */
	@Transient
	public AirportEngine ae;

	/** The id. */
	@Id
	@Column(name = "id")
	private int id;

	/** The airline id. */
	@Column(name = "Airline_id")
	private int airline_id;

	/** The plane model id. */
	@Column(name = "Plane_Model_id")
	private int planeModel_id;

	/** The plane statu id. */
	@Column(name = "Plane_Status_id")
	private int planeStatu_id;

	/** The terminal id. */
	@Transient
	private int terminal_id = -1;

	/** The status arrive. */
	@Transient
	private final int STATUS_ARRIVE = 0;

	/** The status depart. */
	@Transient
	private final int STATUS_DEPART = 1;

	/**
	 * Instantiates a new planes.
	 */
	public Planes() {
	}

	/**
	 * Instantiates a new planes.
	 *
	 * @param id the id
	 * @param airlines the airlines
	 * @param planeModels the plane models
	 * @param planeStatus the plane status
	 */
	public Planes(int id, int airlines, int planeModels, int planeStatus) {
		this.id = id;
		this.airline_id = airlines;
		this.planeModel_id = planeModels;
		this.planeStatu_id = planeStatus;
	}

	/**
	 * Gets the id.
	 *
	 * @return the id
	 */
	public int getId() {
		return this.id;
	}

	/**
	 * Sets the id.
	 *
	 * @param id the new id
	 */
	public void setId(int id) {
		this.id = id;
	}

	/**
	 * Gets the airline id.
	 *
	 * @return the airline id
	 */
	public int getAirline_id() {
		return airline_id;
	}

	/**
	 * Sets the airline id.
	 *
	 * @param airline_id the new airline id
	 */
	public void setAirline_id(int airline_id) {
		this.airline_id = airline_id;
	}

	/**
	 * Gets the plane model id.
	 *
	 * @return the plane model id
	 */
	public int getPlaneModel_id() {
		return planeModel_id;
	}

	/**
	 * Sets the plane model id.
	 *
	 * @param planeModel_id the new plane model id
	 */
	public void setPlaneModel_id(int planeModel_id) {
		this.planeModel_id = planeModel_id;
	}

	/**
	 * Gets the plane statu id.
	 *
	 * @return the plane statu id
	 */
	public int getPlaneStatu_id() {
		return planeStatu_id;
	}

	/**
	 * Sets the plane statu id.
	 *
	 * @param planeStatu_id the new plane statu id
	 */
	public void setPlaneStatu_id(int planeStatu_id) {
		this.planeStatu_id = planeStatu_id;
	}

	/**
	 * Gets the ae.
	 *
	 * @return the ae
	 */
	public AirportEngine getAe() {
		return ae;
	}

	/**
	 * Sets the ae.
	 *
	 * @param ae the new ae
	 */
	public void setAe(AirportEngine ae) {
		this.ae = ae;
	}

	/**
	 * Gets the terminal.
	 *
	 * @return the terminal
	 */
	public int getTerminal() {
		Session session = HibernateUtils.getSessionFactory().openSession();
		try {
			if (terminal_id == -1) {
				SynchronizationFactory.LOCKS.get(Sectors.AIRPORT).lock();
				Query query = session.createSQLQuery("select getTerminal(:plane)").setInteger("plane", this.id);
				terminal_id = Integer.parseInt(query.list().get(0).toString());
				SynchronizationFactory.LOCKS.get(Sectors.AIRPORT).unlock();
			}
		} catch (HibernateException e) {
			e.printStackTrace();
		} finally {
			session.close();
		}
		return terminal_id;
	}

	/**
	 * Do movement.
	 *
	 * @throws InterruptedException the interrupted exception
	 */
	public void doMovement() throws InterruptedException {
		Thread.sleep(12000);
	}

	/* (non-Javadoc)
	 * @see java.lang.Runnable#run()
	 */
	@Override
	public void run() {
		// TODO Auto-generated method stub
		ae = new AirportEngine();
		ae.land(this);
		try {
			this.doMovement();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		ae.takeOff(this);
		Thread.currentThread().interrupt();
	}

}
